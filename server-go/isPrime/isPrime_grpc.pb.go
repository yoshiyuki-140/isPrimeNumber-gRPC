// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: isPrime/isPrime.proto

package isPrime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IsPrimeFunc_CheckPrime_FullMethodName = "/isPrime.IsPrimeFunc/CheckPrime"
)

// IsPrimeFuncClient is the client API for IsPrimeFunc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// サービス定義 (RPC:素数判定)
type IsPrimeFuncClient interface {
	CheckPrime(ctx context.Context, in *Value, opts ...grpc.CallOption) (*IsPrimeResponse, error)
}

type isPrimeFuncClient struct {
	cc grpc.ClientConnInterface
}

func NewIsPrimeFuncClient(cc grpc.ClientConnInterface) IsPrimeFuncClient {
	return &isPrimeFuncClient{cc}
}

func (c *isPrimeFuncClient) CheckPrime(ctx context.Context, in *Value, opts ...grpc.CallOption) (*IsPrimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsPrimeResponse)
	err := c.cc.Invoke(ctx, IsPrimeFunc_CheckPrime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsPrimeFuncServer is the server API for IsPrimeFunc service.
// All implementations must embed UnimplementedIsPrimeFuncServer
// for forward compatibility
//
// サービス定義 (RPC:素数判定)
type IsPrimeFuncServer interface {
	CheckPrime(context.Context, *Value) (*IsPrimeResponse, error)
	mustEmbedUnimplementedIsPrimeFuncServer()
}

// UnimplementedIsPrimeFuncServer must be embedded to have forward compatible implementations.
type UnimplementedIsPrimeFuncServer struct {
}

func (UnimplementedIsPrimeFuncServer) CheckPrime(context.Context, *Value) (*IsPrimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrime not implemented")
}
func (UnimplementedIsPrimeFuncServer) mustEmbedUnimplementedIsPrimeFuncServer() {}

// UnsafeIsPrimeFuncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsPrimeFuncServer will
// result in compilation errors.
type UnsafeIsPrimeFuncServer interface {
	mustEmbedUnimplementedIsPrimeFuncServer()
}

func RegisterIsPrimeFuncServer(s grpc.ServiceRegistrar, srv IsPrimeFuncServer) {
	s.RegisterService(&IsPrimeFunc_ServiceDesc, srv)
}

func _IsPrimeFunc_CheckPrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsPrimeFuncServer).CheckPrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsPrimeFunc_CheckPrime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsPrimeFuncServer).CheckPrime(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

// IsPrimeFunc_ServiceDesc is the grpc.ServiceDesc for IsPrimeFunc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsPrimeFunc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isPrime.IsPrimeFunc",
	HandlerType: (*IsPrimeFuncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPrime",
			Handler:    _IsPrimeFunc_CheckPrime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isPrime/isPrime.proto",
}
